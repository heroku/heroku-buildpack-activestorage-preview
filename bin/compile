#!/usr/bin/env bash
# bin/compile <BUILD_DIR> <CACHE_DIR> <ENV_DIR>

set -eu -o pipefail

FFMPEG_VERSION="5.1.2"
INSTALL_URL="https://heroku-activestorage-default.s3.amazonaws.com/dist_${STACK}_amd64/ffmpeg-${FFMPEG_VERSION}.tar.gz"

BUILDPACK_DIR="$(dirname "$(dirname "$0")")"
BUILD_DIR="$1"
CACHE_DIR="$2"

# Clear legacy cache. All assets are on S3 or re-downloaded
# every time. By removing old cache, we reduce cache size
# and do not affect build times.
rm -rf "$CACHE_DIR/.heroku/activestorage-preview"

curl_retry_on_18() {
  local ec=18;
  local attempts=0;
  while (( ec == 18 && attempts++ < 3 )); do
    curl "$@" # -C - would return code 33 if unsupported by server
    ec=$?
  done
  return $ec
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

echo '-----> Installing binary dependencies for ActiveStorage Preview'

INSTALL_DIR="$BUILD_DIR/.heroku/activestorage-preview"
mkdir -p "$INSTALL_DIR"

APT_CACHE_DIR="/tmp/.heroku/activestorage-preview/cache"
mkdir -p "$APT_CACHE_DIR/archives/partial"

APT_STATE_DIR="/tmp/.heroku/activestorage-preview/state"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true"
APT_OPTIONS="$APT_OPTIONS -o dir::cache=$APT_CACHE_DIR"
APT_OPTIONS="$APT_OPTIONS -o dir::state=$APT_STATE_DIR"
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=/etc/apt/sources.list"

echo 'Downloading latest poppler' | indent
apt-get $APT_OPTIONS update >/dev/null
apt-get $APT_OPTIONS -y -d install --reinstall poppler-utils >/dev/null

echo 'Installing poppler' | indent
for deb in "$APT_CACHE_DIR"/archives/*.deb; do
  dpkg -x "$deb" "$INSTALL_DIR"
done
echo 'Done' | indent

echo "Downloading ffmpeg version $FFMPEG_VERSION" | indent
curl_retry_on_18 -s --fail --retry 3 --retry-connrefused --connect-timeout "${CURL_CONNECT_TIMEOUT:-3}" "$INSTALL_URL" | tar xvz -C "$INSTALL_DIR" >/dev/null 2>&1
echo 'Installing ffmpeg' | indent
echo 'Done' | indent

paths=$(cd "$BUILD_DIR" && find ./.heroku/activestorage-preview -iregex '.*/bin' -type d)
library_paths=$(cd "$BUILD_DIR" && find ./.heroku/activestorage-preview -iregex '.*\.so\(\.[0-9]+\)*' | xargs -n 1 dirname | sort | uniq)

echo 'Exporting environment variables' | indent
# Write profile.d script for run time support
mkdir -p "$BUILD_DIR/.profile.d"
cat <<EOF >"$BUILD_DIR/.profile.d/000_activestorage_preview.sh"
export PATH="$(echo "$paths" | xargs -n 1 | sed 's/^./$HOME/' | paste -s -d ':' -):\$PATH"
export LD_LIBRARY_PATH="$(echo "$library_paths" | xargs -n 1 | sed 's/^./$HOME/' | paste -s -d ':' -):\$LD_LIBRARY_PATH"
EOF

# Export to other buildpacks for build time support
export PATH="$(echo "$paths" | xargs -n 1 | sed "s/^./${BUILD_DIR//\//\\/}/" | paste -s -d ':' -)${PATH:+:}${PATH:-}"
export LD_LIBRARY_PATH="$(echo "$library_paths" | xargs -n 1 | sed "s/^./${BUILD_DIR//\//\\/}/" | paste -s -d ':' -)${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="$(echo "$library_paths" | xargs -n 1 | sed "s/^./${BUILD_DIR//\//\\/}/" | paste -s -d ':' -)${LIBRARY_PATH:+:}${LIBRARY_PATH:-}"
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH)=' >"$BUILDPACK_DIR/export"
echo 'Done' | indent
