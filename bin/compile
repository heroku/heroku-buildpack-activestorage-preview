#!/usr/bin/env bash
# bin/compile <BUILD_DIR> <CACHE_DIR> <ENV_DIR>

set -eu -o pipefail

BUILDPACK_DIR="$(dirname "$(dirname "$0")")"
BUILD_DIR="$1"
CACHE_DIR="$2"

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

echo '-----> Installing binary dependencies for ActiveStorage Preview'

SFFMPEG_VERSION="4.2.3"

# Store which ffmpeg version was installed in the cache to bust the cache if it changes
if [ -f $CACHE_DIR/.apt/SFFMPEG ]; then
	CACHED_SFFMPEG=$(cat "$CACHE_DIR/.apt/SFFMPEG")
else
	CACHED_SFFMPEG=$SFFMPEG_VERSION
fi

APT_CACHE_DIR="$CACHE_DIR/.heroku/activestorage-preview/$STACK/cache"
APT_STATE_DIR="$CACHE_DIR/.heroku/activestorage-preview/$STACK/state"

if [ -f $CACHE_DIR/.apt/SFFMPEG ] && [[ $CACHED_SFFMPEG == $SFFMPEG_VERSION ]] ; then
	echo 'Reusing cache' | indent
else
	echo 'Detected ffmpeg version change, flushing cache' | indent
	rm -rf $APT_CACHE_DIR
fi
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

# Ensure we store the ffmpeg version in the cache for next time.
mkdir -p "$CACHE_DIR/.apt"
echo "$SFFMPEG_VERSION" > "$CACHE_DIR/.apt/SFFMPEG"

APT_OPTIONS="-o debug::nolocking=true"
APT_OPTIONS="$APT_OPTIONS -o dir::cache=$APT_CACHE_DIR"
APT_OPTIONS="$APT_OPTIONS -o dir::state=$APT_STATE_DIR"
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=/etc/apt/sources.list"

if [[ $STACK == "heroku-18" ]]; then
  LIBPOPPLER="libpoppler73"
elif [[ $STACK == "heroku-20" ]]; then
  LIBPOPPLER="libpoppler97"
else
  LIBPOPPLER="libpoppler118"
fi

echo -n 'Downloading packages' | indent
apt-get $APT_OPTIONS update >/dev/null
apt-get $APT_OPTIONS -y -d install --reinstall poppler-utils "$LIBPOPPLER" libnss3 libnspr4 >/dev/null
echo -n '.'

SFFMPEG_FILENAME="sffmpeg_${SFFMPEG_VERSION}_amd64.deb"
curl -sL -o "$APT_CACHE_DIR/archives/$SFFMPEG_FILENAME" "https://heroku-activestorage-default.s3.amazonaws.com/sffmpeg/$SFFMPEG_FILENAME"
echo -n '.'

echo ''

mkdir -p $BUILD_DIR/.heroku/activestorage-preview

echo -n 'Installing packages' | indent
for deb in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  dpkg -x $deb $BUILD_DIR/.heroku/activestorage-preview
  echo -n '.'
done
echo ''

paths=$(cd $BUILD_DIR && find ./.heroku/activestorage-preview -iregex '.*/bin' -type d)
library_paths=$(cd $BUILD_DIR && find ./.heroku/activestorage-preview -iregex '.*\.so\(\.[0-9]+\)*' | xargs -r -n 1 dirname | sort | uniq)

# write profile script
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_activestorage_preview.sh
export PATH="$(echo $paths | xargs -n 1 | sed 's/^./$HOME/' | paste -s -d ':' -):\$PATH"
EOF
if [[ -n "$library_paths" ]]; then
cat <<EOF >>$BUILD_DIR/.profile.d/000_activestorage_preview.sh
  export LD_LIBRARY_PATH="$(echo $library_paths | xargs -n 1 | sed 's/^./$HOME/' | paste -s -d ':' -):\$LD_LIBRARY_PATH"
EOF
fi

# export to other buildpacks
export PATH="$(echo $paths | xargs -n 1 | sed "s/^./${BUILD_DIR//\//\\/}/" | paste -s -d ':' -)${PATH:+:}${PATH:-}"
if [[ -n "$library_paths" ]]; then
  export LD_LIBRARY_PATH="$(echo $library_paths | xargs -n 1 | sed "s/^./${BUILD_DIR//\//\\/}/" | paste -s -d ':' -)${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}"
  export LIBRARY_PATH="$(echo $library_paths | xargs -n 1 | sed "s/^./${BUILD_DIR//\//\\/}/" | paste -s -d ':' -)${LIBRARY_PATH:+:}${LIBRARY_PATH:-}"
fi
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH)=' >"$BUILDPACK_DIR/export"
